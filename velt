-- VeltrixUI.lua
-- A custom Roblox UI library with tabs, elements, and optional key system
-- Created by Ant â€” lightweight, no external dependencies

local VeltrixUI = {}

-- ðŸ’¾ CONFIGURATION
VeltrixUI.UseKeySystem = true
VeltrixUI.CorrectKey = "ant123"
VeltrixUI.KeyAcceptedCallback = function()
    print("VeltrixUI Access Granted")
end

-- Services
local UIS = game:GetService("UserInputService")

-- Draggable helper
local function makeDraggable(frame)
    local dragging, offset
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            offset = input.Position - frame.Position
        end
    end)
    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            frame.Position = input.Position - offset
        end
    end)
end

-- Create Window
function VeltrixUI:CreateWindow(titleText)
    local api = {}
    local gui = Instance.new("ScreenGui", game.CoreGui)
    gui.Name = "VeltrixUI"

    local main = Instance.new("Frame", gui)
    main.Size = UDim2.new(0, 500, 0, 350)
    main.Position = UDim2.new(0.5, -250, 0.5, -175)
    main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    makeDraggable(main)

    local title = Instance.new("TextLabel", main)
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 18
    title.Text = titleText or "VeltrixUI"

    local tabButtons = Instance.new("Frame", main)
    tabButtons.Size = UDim2.new(0, 120, 1, -35)
    tabButtons.Position = UDim2.new(0, 0, 0, 35)
    tabButtons.BackgroundColor3 = Color3.fromRGB(25, 25, 25)

    local content = Instance.new("Frame", main)
    content.Size = UDim2.new(1, -120, 1, -35)
    content.Position = UDim2.new(0, 120, 0, 35)
    content.BackgroundTransparency = 1

    local tabList = {}
    local currentTab

    function api:CreateTab(tabName)
        local tab = {}
        local btn = Instance.new("TextButton", tabButtons)
        btn.Size = UDim2.new(1, 0, 0, 30)
        btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        btn.TextColor3 = Color3.fromRGB(255, 255, 255)
        btn.Font = Enum.Font.Gotham
        btn.TextSize = 14
        btn.Text = tabName

        local tabFrame = Instance.new("ScrollingFrame", content)
        tabFrame.Size = UDim2.new(1, 0, 1, 0)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Visible = false
        tabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

        local layout = Instance.new("UIListLayout", tabFrame)
        layout.Padding = UDim.new(0, 6)

        btn.MouseButton1Click:Connect(function()
            if currentTab then currentTab.Visible = false end
            tabFrame.Visible = true
            currentTab = tabFrame
        end)

        function tab:AddButton(text, callback)
            local b = Instance.new("TextButton", tabFrame)
            b.Size = UDim2.new(1, -10, 0, 30)
            b.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            b.TextColor3 = Color3.fromRGB(255, 255, 255)
            b.Font = Enum.Font.Gotham
            b.TextSize = 14
            b.TextXAlignment = Enum.TextXAlignment.Left
            b.Text = text
            b.MouseButton1Click:Connect(callback)
        end

        function tab:AddToggle(text, callback)
            local state = false
            local t = Instance.new("TextButton", tabFrame)
            t.Size = UDim2.new(1, -10, 0, 30)
            t.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            t.TextColor3 = Color3.fromRGB(255, 255, 255)
            t.Font = Enum.Font.Gotham
            t.TextSize = 14
            t.TextXAlignment = Enum.TextXAlignment.Left
            t.Text = "[ OFF ] " .. text

            t.MouseButton1Click:Connect(function()
                state = not state
                t.Text = (state and "[ ON  ] " or "[ OFF ] ") .. text
                callback(state)
            end)
        end

        function tab:AddSlider(text, min, max, default, callback)
            local lbl = Instance.new("TextLabel", tabFrame)
            lbl.Size = UDim2.new(1, -10, 0, 30)
            lbl.BackgroundTransparency = 1
            lbl.TextColor3 = Color3.fromRGB(255, 255, 255)
            lbl.Font = Enum.Font.Gotham
            lbl.TextSize = 14
            lbl.TextXAlignment = Enum.TextXAlignment.Left
            lbl.Text = text .. ": " .. tostring(default)

            local slider = Instance.new("TextButton", tabFrame)
            slider.Size = UDim2.new(1, -10, 0, 10)
            slider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            slider.Text = ""
            local fill = Instance.new("Frame", slider)
            fill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
            fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
            fill.BorderSizePixel = 0

            slider.MouseButton1Down:Connect(function()
                local conn
                conn = game:GetService("RunService").RenderStepped:Connect(function()
                    local mouseX = UIS:GetMouseLocation().X
                    local pct = math.clamp((mouseX - slider.AbsolutePosition.X)/slider.AbsoluteSize.X, 0, 1)
                    local v = math.floor(min + (max - min)*pct)
                    fill.Size = UDim2.new(pct, 0, 1, 0)
                    lbl.Text = text .. ": " .. tostring(v)
                    callback(v)
                end)

                local endConn
                endConn = UIS.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        conn:Disconnect()
                        endConn:Disconnect()
                    end
                end)
            end)
        end

        tabList[tabName] = tab
        return tab
    end

    return api
end

-- Key System (optional)
if VeltrixUI.UseKeySystem then
    local gui = Instance.new("ScreenGui", game.CoreGui)
    gui.Name = "VeltrixUI_Key"
    local frame = Instance.new("Frame", gui)
    frame.Size = UDim2.new(0, 300, 0, 150)
    frame.Position = UDim2.new(0.5, -150, 0.5, -75)
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    makeDraggable(frame)

    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, 0, 0, 30)
    label.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Font = Enum.Font.GothamBold
    label.TextSize = 16
    label.Text = "Enter Access Key"

    local box = Instance.new("TextBox", frame)
    box.Size = UDim2.new(1, -20, 0, 30)
    box.Position = UDim2.new(0, 10, 0, 50)
    box.PlaceholderText = "Key..."
    box.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    box.TextColor3 = Color3.fromRGB(255, 255, 255)
    box.Font = Enum.Font.Gotham
    box.TextSize = 14

    local submit = Instance.new("TextButton", frame)
    submit.Size = UDim2.new(0, 100, 0, 30)
    submit.Position = UDim2.new(0.5, -50, 1, -40)
    submit.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    submit.TextColor3 = Color3.fromRGB(255, 255, 255)
    submit.Font = Enum.Font.GothamBold
    submit.TextSize = 14
    submit.Text = "Submit"

    submit.MouseButton1Click:Connect(function()
        if box.Text == VeltrixUI.CorrectKey then
            gui:Destroy()
            VeltrixUI.KeyAcceptedCallback()
        else
            box.Text = ""
            box.PlaceholderText = "Wrong key!"
        end
    end)
else
    VeltrixUI.KeyAcceptedCallback()
end

return VeltrixUI
